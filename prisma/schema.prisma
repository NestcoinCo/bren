// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    // // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // // Further reading:
    // // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    // url      = env("DATABASE_URL")
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    walletAddress    String        @id
    fid              Int
    display_name     String
    username         String
    pfp              String
    isAllowanceGiven Boolean
    allowanceGivenAt DateTime      @default(now())
    type             UserType?
    sentTransactions Transaction[] @relation("FromUser")
    sentInvites      Invite[]      @relation("Invitor")
    receivedInvites  Invite[]      @relation("Invitee")
}

model Transaction {
    castHash       String   @id
    fromAddress    String
    fromUser       User     @relation("FromUser", fields: [fromAddress], references: [walletAddress])
    fromUsername   String
    fromFid        Int
    toAddress      String?
    toUsername     String
    toFid          Int
    text           String
    value          String
    link           String
    parentCastHash String?
    amount         Float
    createdAt      DateTime @default(now())
}

model Invite {
    id                   String   @id @default(uuid())
    inviteeFid           Int
    inviteeWalletAddress String?
    invitee              User?    @relation("Invitee", fields: [inviteeWalletAddress], references: [walletAddress])
    invitorFid           Int
    invitorAddress       String?
    invitor              User?    @relation("Invitor", fields: [invitorAddress], references: [walletAddress])
    createdAt            DateTime @default(now())
    castHash             String
}

model BotReply {
    botcastHash  String   @unique
    userCastHash String   @unique
    repliedAt    DateTime @default(now())
}

enum UserType {
    POWER_BADGE
    ALLIES
    SPLITTERS
    INVITED
    FOLLOWER
}
