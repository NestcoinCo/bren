generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model ApiCredential {
  id        String   @id @default(cuid())
  platform  Platform
  apiKey    String   @unique
  apiSecret String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, apiKey])
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  image                String?
  walletAddress        String?           @unique
  fid                  Int?              @unique
  tgUsername           String?           @unique
  isAllowanceGiven     Boolean?
  allowanceGivenAt     DateTime?         @default(now())
  farcasterDetails     FarcasterDetails?
  telegramDetails      TelegramDetails?
  sentTransactions     Transaction[]     @relation("FromUser")
  receivedTransactions Transaction[]     @relation("ToUser")
  userRankings         UserRankings?
  weeklyPoints         WeeklyPoints[]
  pointEvents          PointEvent[]
  accounts             Account[]
  sessions             Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PointEvent {
  id        String   @id @default(uuid())
  userId    String
  event     Event
  points    Int
  platform  Platform
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model FarcasterDetails {
  id           String    @id @default(uuid())
  userId       String    @unique
  fid          Int?      @unique
  display_name String?
  username     String?
  pfp          String?
  type         UserType?
  user         User      @relation(fields: [userId], references: [id])
}

model TelegramDetails {
  id           String  @id @default(uuid())
  userId       String  @unique
  idTG         Float?
  first_name   String?
  display_name String?
  last_name    String?
  pfp          String?
  user         User    @relation(fields: [userId], references: [id])
}

model ProcessedMessage {
  chatId      String
  messageId   String
  processedAt DateTime @default(now())

  @@id([chatId, messageId])
  @@unique([chatId, messageId])
}

model Transaction {
  id             String   @id @default(uuid())
  fromUserId     String
  toUserId       String
  amount         Float
  value          String
  platform       Platform
  createdAt      DateTime @default(now())
  castHash       String?  @unique
  parentCastHash String?  @unique
  messageid      String?  @unique
  text           String?
  link           String?
  groupid        Float?
  groupname      String?
  fromUser       User     @relation("FromUser", fields: [fromUserId], references: [id])
  toUser         User     @relation("ToUser", fields: [toUserId], references: [id])
}

model UserRankings {
  id                String @id @default(uuid())
  userId            String @unique
  tipsReceived      Float? @default(0)
  tipsSent          Float? @default(0)
  tipsReceivedCount Int?   @default(0)
  tipsSentCount     Int?   @default(0)
  user              User   @relation(fields: [userId], references: [id])
}

model WeeklyPoints {
  id           String   @id @default(uuid())
  userId       String
  weekStart    DateTime
  pointsEarned Float    @default(0)
  pointsGiven  Float    @default(0)
  platform     Platform
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, weekStart, platform])
}

model Invite {
  id                   String   @id @default(uuid())
  inviteeFid           Int
  inviteeWalletAddress String?
  invitorFid           Int
  invitorAddress       String?
  createdAt            DateTime @default(now())
  inviteePfp           String
  castHash             String
}

model BotReply {
  repliedAt    DateTime @default(now())
  botcastHash  String   @unique
  userCastHash String?  @unique
}

enum UserType {
  POWER_BADGE
  ALLIES
  SPLITTERS
  INVITED
  FOLLOWER
  WHITELISTED
}

model Round {
  id           Int      @id
  name         String
  startsAt     DateTime
  votingEndsAt DateTime
  winners      Winner[]
}

model Winner {
  id          String  @id
  fid         Int
  amount      Float
  amountBuild Float? // New field for amounts starting with non-zero
  rounds      Round[]
  roundIds    Int[]

  @@index([amount(sort: Desc), fid(sort: Asc)])
}

enum Platform {
  FARCASTER
  TELEGRAM
  ONBOARD
  BLOCASSET
}

enum Event {
  CREATED_ACCOUNT
  SET_UP_PROFILE
  COMPLETED_KYC
  ADDED_PROJECT
  FARCASTER_TIP
  TELEGRAM_TIP
}
